# -*- coding: utf-8 -*-
from flask import Flask, request, redirect, render_template_string, session, jsonify
from datetime import datetime
import sqlite3
import os
import pytz

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'
vntz = pytz.timezone("Asia/Ho_Chi_Minh")
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD = "admin12345"
API_SECRET_KEY = 'secret123'
DB_FILE = 'license.db'

if not os.path.exists(DB_FILE):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE licenses (
            license_key TEXT PRIMARY KEY,
            user TEXT NOT NULL,
            machine_id TEXT UNIQUE,
            expire TEXT,
            activated INTEGER,
            limit_instance INTEGER
        )
    ''')
    conn.commit()
    conn.close()



HTML_PAGE = """
<!DOCTYPE html>
<html>
<head>
    <title>License Manager</title>
    <style>
        body { font-family: Arial; margin: 40px; }
        table { border-collapse: collapse; width: 100%; }
        th, td { border: 1px solid #ccc; padding: 8px; text-align: center; }
        th { background-color: #f2f2f2; }
        form { margin-bottom: 20px; }
        .logout { float: right; }
    </style>
</head>
<body>
    <h2>License Manager <a class="logout" href="/logout">Logout</a></h2>

    <form method="POST" action="/add">
      <input name="license_key" placeholder="License Key" required>
      <input name="user" placeholder="User" required>
      <input name="limit_instance" placeholder="Limit Instance" required>
      <input name="expire" placeholder="Expire (YYYY-MM-DD HH:MM)" required>
      <button type="submit">Add License</button>
    </form>

    <table>
    <tr><th>Key</th><th>User</th><th>Limit Instance</th><th>Expire</th><th>Activated</th><th>Machine ID</th><th>Action</th></tr>
    {% if db %}
      {% for lic in db %}
      <tr>
        <td>{{ lic[0] }}</td>
        <td>{{ lic[1] }}</td>
        <td>{{ lic[5] }}</td>
        <td>{{ lic[3] }}</td>
        <td>{{ 'Yes' if lic[4] else 'No' }}</td>
        <td>{{ lic[2] or '' }}</td>
        <td>
            <a href="/edit/{{ lic[0] }}">Edit</a> |
            <a href="/delete/{{ lic[0] }}" onclick="return confirm('Delete This Key?')">Delete</a>
        </td>
      </tr>
      {% endfor %}
    {% else %}
      <tr><td colspan="7">No Key Yet</td></tr>
    {% endif %}
    </table>
</body>
</html>
"""

LOGIN_PAGE = """
<h2>Admin Login</h2>
<form method="POST">
    Username: <input name="username"><br>
    Password: <input type="password" name="password"><br>
    <input type="submit" value="Login">
</form>
"""

@app.before_request
def force_https_for_api():
    http_allowed = []
    if not any(request.path.startswith(p) for p in http_allowed):
        if not request.is_secure:
            url = request.url.replace("http://", "https://", 1)
            return redirect(url, code=301)

def check_auth():
    return session.get("logged_in")

def get_all_licenses():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT * FROM licenses")
    licenses = c.fetchall()
    conn.close()
    return licenses

@app.route("/", methods=["GET"])
def admin():
    if not check_auth():
        return redirect("/login")
    return render_template_string(HTML_PAGE, db=get_all_licenses())

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]
        if username == ADMIN_USERNAME and password == ADMIN_PASSWORD:
            session["logged_in"] = True
            return redirect("/")
    return render_template_string(LOGIN_PAGE)

@app.route("/logout")
def logout():
    session.pop("logged_in", None)
    return redirect("/login")

@app.route("/add", methods=["POST"])
def add_license():
    if not check_auth(): return redirect("/login")
    license_key = request.form["license_key"]
    user = request.form["user"]
    expire = request.form["expire"]
    limit_instance=request.form["limit_instance"]
    with sqlite3.connect(DB_FILE) as conn:
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO licenses VALUES (?, ?, NULL, ?, 0,?)", (license_key, user, expire,limit_instance))
        conn.commit()
    return redirect("/")

@app.route("/delete/<license_key>")
def delete_license(license_key):
    if not check_auth(): return redirect("/login")
    with sqlite3.connect(DB_FILE) as conn:
        c = conn.cursor()
        c.execute("DELETE FROM licenses WHERE license_key = ?", (license_key,))
        conn.commit()
    return redirect("/")

@app.route("/edit/<license_key>", methods=["GET", "POST"])
def edit_license(license_key):
    if not check_auth(): return redirect("/login")

    if request.method == "POST":
        user = request.form["user"]
        expire = request.form["expire"]
        limit_instance=request.form["limit_instance"]
        with sqlite3.connect(DB_FILE) as conn:
            c = conn.cursor()
            c.execute("UPDATE licenses SET user = ?, expire = ?, limit_instance = ? WHERE license_key = ? ", (user, expire,limit_instance, license_key))
            conn.commit()
        return redirect("/")

    with sqlite3.connect(DB_FILE) as conn:
        c = conn.cursor()
        c.execute("SELECT license_key, user, expire,limit_instance FROM licenses WHERE license_key = ?", (license_key,))
        lic = c.fetchone()

    if not lic:
        return "License not found", 404

    return render_template_string("""
    <h2>Edit License</h2>
    <form method="POST">
        License Key : <b>{{ lic[0] }}</b><br>
        User: <input name="user" value="{{ lic[1] }}"><br>
        Expire (YYYY-MM-DD HH:MM): <input name="expire" value="{{ lic[2] }}"><br>
        Limit Instance : <input name="limit_instance" value="{{ lic[4] }}"><br>
        <input type="submit" value="Update">
    </form>
    <a href="/">Return</a>
    """, lic=lic)

@app.route("/activate", methods=["POST"])
def activate():
    api_key = request.headers.get("X-API-KEY")
    if api_key != API_SECRET_KEY:
        return jsonify({"status": "unauthorized"}), 401

    data = request.get_json()
    license_key = data.get("license_key")
    machine_id = data.get("machine_id")

    with sqlite3.connect(DB_FILE) as conn:
        c = conn.cursor()
        c.execute("SELECT * FROM licenses WHERE license_key = ?", (license_key,))
        lic = c.fetchone()

        if not lic:
            return jsonify({"status": "invalid"}), 404

        expire_dt = datetime.strptime(lic[3], "%Y-%m-%d %H:%M").replace(tzinfo=vntz)
        now_dt = datetime.now(vntz)
        time_remaining_sec = (expire_dt - now_dt).total_seconds()
        limit_instance=lic[5]
        if time_remaining_sec < 0:
            return jsonify({"status": "expired"}), 403

        if not lic[4]:
            c.execute("UPDATE licenses SET machine_id = ?, activated = 1 WHERE license_key = ?",
                      (machine_id, license_key))
            conn.commit()
            return jsonify({"status": "success", "expire": time_remaining_sec ,"limit_instance":limit_instance})

        if lic[2] == machine_id:
            return jsonify({"status": "success", "expire": time_remaining_sec,"limit_instance":limit_instance})

    return jsonify({"status": "locked"}), 403
# app.run(port=8000)
